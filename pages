import { useState, useEffect } from "react";
import { ethers } from "ethers";
import atm_abi from "../artifacts/contracts/Assessment.sol/Assessment.json";

export default function HomePage() {
  const [ethWallet, setEthWallet] = useState(undefined);
  const [account, setAccount] = useState(undefined);
  const [atm, setATM] = useState(undefined);
  const [balance, setBalance] = useState(undefined);

  const contractAddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3";
  const atmABI = atm_abi.abi;

  const getWallet = async () => {
    if (window.ethereum) {
      setEthWallet(window.ethereum);
      console.log("MetaMask is installed.");
    } else {
      console.error("MetaMask is not installed.");
    }
  };

  const handleAccount = (accounts) => {
    if (accounts && accounts.length > 0) {
      console.log("Account connected: ", accounts[0]);
      setAccount(accounts[0]);
    } else {
      console.log("No account found");
    }
  };

  const connectAccount = async () => {
    if (!ethWallet) {
      alert("MetaMask wallet is required to connect");
      return;
    }

    try {
      const accounts = await ethWallet.request({ method: "eth_requestAccounts" });
      handleAccount(accounts);
      getATMContract();
    } catch (error) {
      console.error("Error connecting to MetaMask: ", error);
    }
  };

  const getATMContract = () => {
    try {
      const provider = new ethers.providers.Web3Provider(ethWallet);
      const signer = provider.getSigner();
      const atmContract = new ethers.Contract(contractAddress, atmABI, signer);
      setATM(atmContract);
      console.log("ATM contract set.");
    } catch (error) {
      console.error("Error getting contract: ", error);
    }
  };

  const getBalance = async () => {
    if (atm) {
      try {
        const balance = await atm.getBalance();
        setBalance(balance.toNumber());
        console.log("Balance fetched: ", balance.toNumber());
      } catch (error) {
        console.error("Error getting balance: ", error);
      }
    }
  };

  const deposit = async () => {
    if (atm) {
      try {
        const tx = await atm.deposit({ value: ethers.utils.parseEther("1") });
        await tx.wait();
        console.log("Deposit successful.");
        getBalance();
      } catch (error) {
        console.error("Error making deposit: ", error);
      }
    } else {
      console.error("ATM contract is not set.");
    }
  };

  const withdraw = async () => {
    if (atm) {
      try {
        const tx = await atm.withdraw(ethers.utils.parseEther("1"));
        await tx.wait();
        console.log("Withdrawal successful.");
        getBalance();
      } catch (error) {
        console.error("Error making withdrawal: ", error);
      }
    } else {
      console.error("ATM contract is not set.");
    }
  };

  useEffect(() => {
    getWallet();
  }, []);

  const initUser = () => {
    if (!ethWallet) {
      return <p>Please install Metamask in order to use this ATM.</p>;
    }

    if (!account) {
      return <button onClick={connectAccount}>Please connect your Metamask wallet</button>;
    }

    if (balance === undefined) {
      getBalance();
    }

    return (
      <div className="account-container">
        <p>Your Account: {account}</p>
        <p>Your Balance: {balance}</p>
        <button onClick={deposit}>Deposit 1 ETH</button>
        <button onClick={withdraw}>Withdraw 1 ETH</button>
      </div>
    );
  };

  return (
    <main className="container">
      <header><h1>Welcome to Llanes ATM!</h1></header>
      {initUser()}
      <style jsx>{`
        .container {
          font-family: Arial, sans-serif;
          background-color: #f0f0f0;
          display: flex;
          justify-content: center;
          align-items: center;
          flex-direction: column;
          height: 100vh;
          margin: 0;
        }

        .account-container {
          background-color: #fff;
          padding: 20px;
          border-radius: 8px;
          box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
          text-align: center;
          max-width: 300px;
          width: 100%;
          margin-bottom: 20px;
        }

        .account-container p {
          margin: 10px 0;
          font-size: 16px;
        }

        .account-container button {
          background-color: #007bff;
          color: #fff;
          border: none;
          border-radius: 4px;
          padding: 10px 20px;
          margin: 10px 5px;
          cursor: pointer;
          font-size: 16px;
        }

        .account-container button:hover {
          background-color: #0056b3;
        }
      `}</style>
    </main>
  );
}

